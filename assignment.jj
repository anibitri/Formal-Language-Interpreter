options {
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(TPTP)

import java.util.*;

public class TPTP {

  static Map<String, Step> steps = new LinkedHashMap<>();
  static Set<String> stepNames = new HashSet<>();
  static String startStep;
  static int startX, startY;
  static String currentConditionVar;
  
  //Check if an arithmetic expression is positive linear.
  //It can contain addition and multiplication, but no subtraction or division.
  public static boolean isPositiveLinear(String expr, boolean disallowSubtraction) {
      if(expr.indexOf('*') != -1) return false;
      if(disallowSubtraction && expr.indexOf('-') != -1) return false;
      for (int i = 0; i < expr.length(); i++) {
          if(expr.charAt(i) == '-') {
              if(i+1 >= expr.length() || !Character.isDigit(expr.charAt(i+1))) {
                  return false;
              }
          }
      }
      return true;
  }
  
  //Check if the else expressions are nonnegative for the given condition value.
  public static boolean elseExpressionsNonNegative(String expr1, String expr2, String id1, String id2, int condVal, String condVar) {
      int val1, val2;
      if(condVar.equals(id1)) {
         //Condition variable is the first parameter: test with (condVal, 0)
         val1 = evaluate(expr1, condVal, 0, id1, id2);
         val2 = evaluate(expr2, condVal, 0, id1, id2);
      } else if(condVar.equals(id2)) {
         //Otherwise, test with (0, condVal)
         val1 = evaluate(expr1, 0, condVal, id1, id2);
         val2 = evaluate(expr2, 0, condVal, id1, id2);
      } else {
         //Fallback: use (condVal, 0)
         val1 = evaluate(expr1, condVal, 0, id1, id2);
         val2 = evaluate(expr2, condVal, 0, id1, id2);
      }
      return (val1 >= 0 && val2 >= 0);
  }
  
  //Evaluates an arithmetic expression using the current parameter values.
  public static int evaluate(String expr, int x, int y, String id1, String id2) {
      expr = expr.trim();
      if(expr.startsWith(id1)) {
         if(expr.equals(id1)) return x;
         int len = id1.length();
         char op = expr.charAt(len);
         int num = Integer.parseInt(expr.substring(len+1));
         if(op == '-') return x - num;
         else if(op == '+') return x + num;
      } else if(expr.startsWith(id2)) {
         if(expr.equals(id2)) return y;
         int len = id2.length();
         char op = expr.charAt(len);
         int num = Integer.parseInt(expr.substring(len+1));
         if(op == '-') return y - num;
         else if(op == '+') return y + num;
      }
      try {
          return Integer.parseInt(expr);
      } catch(Exception e) {
          return 0;
      }
  }
  
  public static void main(String[] args) {
    try {
        TPTP parser = new TPTP(System.in);
        parser.Program();
        // If we parsed successfully, do the normal output.
        System.out.println("Pass");
        if (isSimple()) {
            System.out.println("Simple");
            execute();
        } else {
            System.out.println("Non-simple");
            System.out.println(getFirstNonSimpleStep());
        }
    } catch (ParseException e) {
        // Print only a single line "Fail" to standard output.
        System.out.println("Fail");
        
        // Extract the line number from the exception.
        // e.currentToken is automatically provided by JavaCC's ParseException.
        Token errortoken = e.currentToken.next;
        int line = (e.currentToken != null ? e.currentToken.beginLine : -1);
        // Now print exactly two lines to System.err:
        // First, the line number:
        System.err.println(line);
        // Second, a custom error message describing the violation.
        // You can decode the exception message or check conditions here.
        
        String encountered = errortoken.image;
        String customMessage = decodeError(e, encountered);
        System.err.println(customMessage);
    } catch (TokenMgrError e) {
      System.out.println("Fail");
      System.err.println(e.getMessage());
    }
  }

  private static String decodeError(ParseException e, String encountered) {
      if (e.getMessage().contains("EOF")) {
          return "Unexpected " + encountered + " after run instruction";
      } else {
          return "Unexpected character: " + encountered;
      }
    }


  
  //Check if all steps are simple.
  static boolean isSimple() {
      for (Step step : steps.values()) {
          if (!step.isSimple) return false;
      }
      return true;
  }
  
  //Get the first non-simple step name.
  //If all steps are simple, return an empty string.
  static String getFirstNonSimpleStep() {
      for (Step step : steps.values()) {
          if (!step.isSimple) return step.name;
      }
      return "";
  }
  
  //Execute the program starting from the initial step and coordinates.
  //If the robot goes out of bounds, print "Fail" and an error message.
  static void execute() {
      Set<String> visited = new HashSet<>();
      int x = startX, y = startY;
      String currentStep = startStep;
      
      while (steps.containsKey(currentStep)) {
          if (x < 0 || y < 0 || x > 1000000000 || y > 1000000000) {
              System.out.println("Fail");
              System.err.println("Robot coordinates out of bounds.");
              return;
          }
          
          String state = currentStep + "," + x + "," + y;
          if (visited.contains(state)) {
              System.out.println("Loop");
              return;
          }
          visited.add(state);
          
          Step step = steps.get(currentStep);
          int oldX = x, oldY = y;
          int newX, newY;
          if (oldX < step.conditionValue) {
              newX = evaluate(step.becomesExpr1, oldX, oldY, step.id1, step.id2);
              newY = evaluate(step.becomesExpr2, oldX, oldY, step.id1, step.id2);
              currentStep = step.nextStep;
          } else {
              newX = evaluate(step.elseExpr1, oldX, oldY, step.id1, step.id2);
              newY = evaluate(step.elseExpr2, oldX, oldY, step.id1, step.id2);
              currentStep = step.elseStep;
          }
          x = newX;
          y = newY;
      }
      System.out.println(currentStep + " " + x + " " + y);
  }
}

//The Step class represents a step in the program.
//Contains the step name, condition value, next step, else step, and expressions.
//Also contains the parameter names for the step.
class Step {
  String name;
  int conditionValue;
  String nextStep, elseStep;
  boolean isSimple;
  // Arithmetic expression strings.
  String becomesExpr1, becomesExpr2, elseExpr1, elseExpr2;
  // Parameter names for this step.
  String id1, id2;
  
  Step(String name, int conditionValue, String nextStep, String elseStep, boolean isSimple,
       String becomesExpr1, String becomesExpr2, String elseExpr1, String elseExpr2,
       String id1, String id2) {
      this.name = name;
      this.conditionValue = conditionValue;
      this.nextStep = nextStep;
      this.elseStep = elseStep;
      this.isSimple = isSimple;
      this.becomesExpr1 = becomesExpr1;
      this.becomesExpr2 = becomesExpr2;
      this.elseExpr1 = elseExpr1;
      this.elseExpr2 = elseExpr2;
      this.id1 = id1;
      this.id2 = id2;
  }
}

PARSER_END(TPTP)

/*The grammar rules for the parser.
 * Using separate tokens for reserved keywords because if one token is used for all reserved keywords,
 * it can cause conflicts within the program.  
*/
TOKEN:
{
  <IF: "if"> |
  <BECOMES: "becomes"> |
  <ELSE: "else"> |
  <AND: "and"> |
  <RUN: "run"> |
  <COLON: ":"> |
  <COMMA: ","> |
  <LPAREN: "("> |
  <RPAREN: ")"> |
  <LESS_THAN: "<"> |
  <SEMICOLON: ";"> |
  <NUM: ( "0" | (["1"-"9"] (["0"-"9"])* ) )> |
  <ID: (["a"-"z", "A"-"Z"]) (["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}

SKIP: { " " | "\t" | "\r" | "\n" }

//The main program is defined here.
//It consists of a series of step instructions followed by a run instruction.
//The program ends with an EOF token to indicate the end of input.
void Program() :
{}
{
  ( StepInstruction() <SEMICOLON> )+ RunInstruction() <EOF>
}

//The step instruction consists of a step name, condition, and two branches (next and else).
//The condition is defined by a variable and a number, and the branches can be long or short forms.
void StepInstruction() :
{
  Token stepName, id1, id2, temp;
  String nextStep = null, elseStep = null;
  String name;
  int conditionValue = 0;

  //Flags to indicate if the becomes and else blocks are present.
  //If they are not present, the default is to use the parameter names as expressions.
  boolean hasBecomes = false, hasElseBlock = false;

  //Variables for arithmetic expressions.
  String becomesExpr1 = null, becomesExpr2 = null, elseExpr1 = null, elseExpr2 = null;

  //Temporary strings.
  String tempStr1 = null, tempStr2 = null;

  //Parameter names.
  String p1Name = null, p2Name = null;
}
{
  //Parse step name.
  
  try {
      //Check if the step name is valid.
      stepName = <ID>
  } catch (ParseException e) {
      if (e.getMessage().contains("<ID>")) {
          throw new ParseException("Program must have at least one step.");
      } else {
          throw e;
      }
  }
  {
      name = stepName.image;
      if (TPTP.stepNames.contains(name)) {
          throw new ParseException("Duplicate step name: " + name);
      }
      TPTP.stepNames.add(name);
  }
  
  //Expect colon and "if" keyword.
  <COLON> <IF>
  
  //Parse condition and parameter list (ID, ID). Condition() returns an int and sets TPTP.currentConditionVar.
  conditionValue = Condition() <LPAREN> id1 = <ID> <COMMA> id2 = <ID> <RPAREN>
  {
      p1Name = id1.image;
      p2Name = id2.image;
  }
  
  //Next step (NSTEP) clause: either long form with becomes clause or short form.
  (
    //Option 1: Long form.
    <BECOMES> <LPAREN>
      { tempStr1 = ArithmeticExpressionString(); }
      <COMMA>
      { tempStr2 = ArithmeticExpressionString(); }
      <RPAREN> <AND>
      temp = <ID> { nextStep = temp.image; hasBecomes = true; becomesExpr1 = tempStr1; becomesExpr2 = tempStr2; }
  |
    //Option 2: Short form.
    temp = <ID> { nextStep = temp.image; }
  )
  
  //Else clause: either long form or short form.
  <ELSE>
  (
    //Option 1: Long form.
    <LPAREN>
      { tempStr1 = ArithmeticExpressionString(); }
      <COMMA>
      { tempStr2 = ArithmeticExpressionString(); }
      <RPAREN> <AND>
      temp = <ID> { elseStep = temp.image; hasElseBlock = true; elseExpr1 = tempStr1; elseExpr2 = tempStr2; }
  |
    //Option 2: Short form.
    temp = <ID> { elseStep = temp.image; }
  )
  {
      //If arithmetic expressions weren't provided, default to identity.
      if (!hasBecomes) { becomesExpr1 = p1Name; becomesExpr2 = p2Name; }
      if (!hasElseBlock) { elseExpr1 = p1Name; elseExpr2 = p2Name; }
      
      //Determine simplicity:
      boolean simple = true;

      //All expressions must be positive linear.
      if (!TPTP.isPositiveLinear(becomesExpr1, true)) simple = false;
      if (!TPTP.isPositiveLinear(becomesExpr2, true)) simple = false;
      if (!TPTP.isPositiveLinear(elseExpr1, false)) simple = false;
      if (!TPTP.isPositiveLinear(elseExpr2, false)) simple = false;

      //In the becomes branch, no subtraction is allowed.
      if (hasBecomes) {
          if (becomesExpr1.indexOf('-') != -1 || becomesExpr2.indexOf('-') != -1) simple = false;
      }

      //For nonnegative parameters making the condition false,
      //The else expressions must evaluate to nonnegative.
      if (!TPTP.elseExpressionsNonNegative(elseExpr1, elseExpr2, p1Name, p2Name, conditionValue, TPTP.currentConditionVar)) simple = false;
      
      TPTP.steps.put(name, new Step(name, conditionValue, nextStep, elseStep, simple, becomesExpr1, becomesExpr2, elseExpr1, elseExpr2, p1Name, p2Name));
  }
}

//The condition is defined by a variable and a number.

int Condition() :
{
  Token id, num;
}
{
  id = <ID> <LESS_THAN> num = <NUM> { TPTP.currentConditionVar = id.image; return Integer.parseInt(num.image); }
}

//The arithmetic expression is defined by a series of numbers and identifiers, separated by operators.
String ArithmeticExpressionString() :
{
  Token t;
  StringBuffer sb = new StringBuffer();
}
{
  (
    t = <NUM> { sb.append(t.image); } | t = <ID> { sb.append(t.image); }
  )
  ( 
    (
      "-" { sb.append("-"); }
    | "+" { sb.append("+"); }
    | "*" { sb.append("*"); }
    )
    (
      t = <NUM> { sb.append(t.image); } | t = <ID> { sb.append(t.image); }
    )
  )*
  { return sb.toString(); }
}

//The run instruction specifies the initial step and coordinates for the robot.
void RunInstruction() :
{
  Token step, n1, n2;
}
{
  <RUN> step = <ID> <LPAREN> n1 = <NUM> <COMMA> n2 = <NUM> <RPAREN>
  {
      TPTP.startStep = step.image;
      TPTP.startX = Integer.parseInt(n1.image);
      TPTP.startY = Integer.parseInt(n2.image);
  }
}

//The expression is defined by a series of arithmetic expressions.
//It can be a single arithmetic expression or a combination of multiple expressions.
void Expression() :
{}
{
  ArithmeticExpressionString()
}
